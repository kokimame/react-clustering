{"version":3,"sources":["ClusteringAlgorithms/Kmeans.js","ClusteringVisualizer/ClusteringVisualizer.js","App.js","index.js"],"names":["COLOR_PALLATE","get2dCentroid","cluster","xSum","ySum","forEach","point","length","get2dEuclidDistance","p1","p2","xd","yd","Math","sqrt","getKmeansClusteredPoints","points","colors","auxillaryPoints","slice","K","N","centroids","Array","from","v","clusteredPoints","k","i","push","epoch","distanceArray","j","nearest","indexOf","min","console","log","newCentroids","flatClustedPoints","index","KmeansClustering","WINDOW_WIDTH","window","innerWidth","WINDOW_HEIGHT","innerHeight","onresize","randomIntFromInterval","max","floor","random","ClusteringVisualizer","props","state","this","resetPoints","NUMBER_OF_POINTS","setState","currentPoints","document","getElementsByClassName","style","backgroundColor","className","map","value","idx","key","left","bottom","title","position","top","onClick","id","React","Component","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b6ca514c.chunk.js","sourcesContent":["const COLOR_PALLATE = ['lightgreen', 'pink', 'orange'];\n\nfunction get2dCentroid(cluster) {\n    var xSum = 0, ySum = 0;\n    cluster.forEach(point => {\n        xSum += point[0];\n        ySum += point[1];\n    })\n    return [xSum / cluster.length, ySum / cluster.length];\n}\n\nfunction get2dEuclidDistance(p1, p2) {\n    var xd = p2[0] - p1[0];\n    var yd = p2[1] - p1[1];\n    xd *= xd;\n    yd *= yd;\n    return Math.sqrt(xd + yd);\n}\n\nexport function getKmeansClusteredPoints(points) {\n    const K = 2;\n    const colors = [];\n    const auxillaryPoints = points.slice();\n    KmeansClustering(K, auxillaryPoints, colors);\n    points = auxillaryPoints\n\n    return [points, colors];\n}\n\nfunction KmeansClustering(K, points, colors) {\n    const N = points.length;\n    const centroids = Array.from({length: K}, v => 0);\n    const clusteredPoints = Array.from({length: K}, v => []);\n    for (let k = 0; k < K; k++) {\n        for (let i = 0; i < N; i++) {\n            if (i % K === k) {\n                clusteredPoints[k].push(points[i]);\n            }\n        }\n        centroids[k] = get2dCentroid(clusteredPoints[k]);\n    }\n\n    for (let epoch = 0; epoch < 50; epoch++) {\n        const clusteredPoints = Array.from({length: K}, v => []);\n        for (let i = 0; i < N; i++) {\n            const distanceArray = Array.from(\n                {length: K}, (v, j) => get2dEuclidDistance(points[i], centroids[j])\n            )\n            const nearest = distanceArray.indexOf(Math.min(...distanceArray));\n            console.log(distanceArray, nearest)\n            clusteredPoints[nearest].push(points[i]);\n        }\n        const newCentroids = Array.from({length: K}, v => 0);\n        for (let k = 0; k < K; k++) {\n            newCentroids[k] = get2dCentroid(clusteredPoints[k]);\n        }\n        // if (centroids == newCentroids)\n    }\n\n    const flatClustedPoints = [];\n    clusteredPoints.forEach((cluster, index) => {\n        cluster.forEach(point => {\n            flatClustedPoints.push(point);\n            colors.push(COLOR_PALLATE[index]);\n        })\n    })\n    points = flatClustedPoints;\n}","import React from 'react';\nimport './ClusteringVisualizer.css'\nimport { getKmeansClusteredPoints } from '../ClusteringAlgorithms/Kmeans';\n\nlet WINDOW_WIDTH = window.innerWidth;\nlet WINDOW_HEIGHT = window.innerHeight;\nlet NUMBER_OF_POINTS = 100;\n\nfunction reportWindowSize() {\n    WINDOW_WIDTH = window.innerWidth;\n    WINDOW_HEIGHT = window.innerHeight;\n}\nwindow.onresize = reportWindowSize;\n\nconst PRIMARY_COLOR = 'turquoise';\nconst SECONDARY_COLOR = 'red';\nconst ANIMATION_SPEED_MS = 10;\n\nclass ClusteringVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            points: []\n        }\n    }\n    componentDidMount() {\n        this.resetPoints();\n    }\n    resetPoints() {\n        const points = [];\n        for (let i = 0; i < NUMBER_OF_POINTS / 2; i++) {\n            points.push([\n                randomIntFromInterval(2*WINDOW_WIDTH/5, WINDOW_WIDTH),\n                randomIntFromInterval(2*WINDOW_HEIGHT/5, WINDOW_HEIGHT)\n            ])\n        }\n        for (let i = NUMBER_OF_POINTS / 2; i < NUMBER_OF_POINTS; i++) {\n            points.push([\n                randomIntFromInterval(0, 3*WINDOW_WIDTH/5),\n                randomIntFromInterval(0, 3*WINDOW_HEIGHT/5)\n            ])\n        }\n        this.setState({points: points});\n\n        const currentPoints = document.getElementsByClassName('a-point');\n        for (let i = 0; i < currentPoints.length; i++) {\n            const pointStyle = currentPoints[i].style;\n            pointStyle.backgroundColor = PRIMARY_COLOR;\n        }\n    }\n\n    KmeansClustering() {\n        const [points, colors] = getKmeansClusteredPoints(this.state.points);\n        const currentPoints = document.getElementsByClassName('a-point');\n        for (let i = 0; i < colors.length; i++) {\n            const pointStyle = currentPoints[i].style;\n            pointStyle.backgroundColor = colors[i];\n        }\n    }\n    render() {\n        const points = this.state.points;\n        const TOTAL_BUTTONS = 5;\n        \n        return (\n            <>\n            <div className=\"points-container\">\n                {points.map((value, idx) => (\n                    <div\n                        className=\"a-point\"\n                        key={idx}\n                        style={{\n                            backgroundColor: PRIMARY_COLOR,\n                            left: `${value[0]}px`,\n                            bottom: `${value[1]}px`\n                        }}\n                    ></div>\n                ))}\n            </div>\n            <div className=\"buttons\" > \n                <button title=\"Generates a new random points\" \n                    style={{ position: 'relative',top:`${0*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} \n                    onClick={() => this.resetPoints()}>\n                    Generate New Points\n                </button>\n                <button title=\"K-means Clustering\" id=\"KmeansBtn\"\n                    style={{ position: 'relative', top:`${0.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} \n                    onClick={() => this.KmeansClustering()}>\n                    K-means Clustering\n                </button>\n                {/* <button title=\"Graph-based Clustering\" id=\"GraphBtn\"\n                    style={{ position: 'relative', top:`${1.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} \n                    onClick={() => {}}>\n                    Graph-based Clustering (Not yet)\n                </button> */}\n            </div>\n            </>\n        );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default ClusteringVisualizer;","import React from 'react';\nimport ClusteringVisualizer from './ClusteringVisualizer/ClusteringVisualizer'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ClusteringVisualizer />\n    </div>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n)"],"sourceRoot":""}