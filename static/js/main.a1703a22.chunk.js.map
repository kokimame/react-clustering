{"version":3,"sources":["ClusteringVisualizer/ClusteringVisualizer.js","App.js","index.js"],"names":["WINDOW_WIDTH","window","innerWidth","WINDOW_HEIGHT","innerHeight","onresize","randomIntFromInterval","min","max","Math","floor","random","ClusteringVisualizer","props","state","points","this","resetPoints","i","push","setState","className","map","value","idx","key","style","backgroundColor","left","bottom","title","position","top","onClick","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"wOAGIA,G,MAAeC,OAAOC,YACtBC,EAAgBF,OAAOG,YAO3BH,OAAOI,SAJP,WACIL,EAAeC,OAAOC,WACtBC,EAAgBF,OAAOG,aA2D3B,SAASE,EAAsBC,EAAKC,GAChC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGzCK,M,kDAtDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,OAAQ,IAHG,E,gEAOfC,KAAKC,gB,oCAIL,IADA,IAAMF,EAAS,GACNG,EAAI,EAAGA,EAxBD,IAwBuBA,IAClCH,EAAOI,KAAK,CACRb,EAAsB,EAAGN,GACzBM,EAAsB,EAAGH,KAGjCa,KAAKI,SAAS,CAACL,OAAQA,M,+BAEjB,IAAD,OACCA,EAASC,KAAKF,MAAMC,OAG1B,OACI,oCACA,yBAAKM,UAAU,oBACVN,EAAOO,KAAI,SAACC,EAAOC,GAAR,OACR,yBACIH,UAAU,UACVI,IAAKD,EACLE,MAAO,CACHC,gBApCN,YAqCMC,KAAK,GAAD,OAAKL,EAAM,GAAX,MACJM,OAAO,GAAD,OAAKN,EAAM,GAAX,aAKtB,yBAAKF,UAAU,WACX,4BAAQS,MAAM,gCACVJ,MAAO,CAAEK,SAAU,WAAWC,IAAI,GAAD,OAAI,GAAG7B,EAAc,IAnB5C,EAmBuB,OACjC8B,QAAS,kBAAM,EAAKhB,gBAFxB,6B,GAxCmBiB,IAAMC,W,MCL1BC,MARf,WACE,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,QCHNgB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.a1703a22.chunk.js","sourcesContent":["import React from 'react';\nimport './ClusteringVisualizer.css'\n\nlet WINDOW_WIDTH = window.innerWidth;\nlet WINDOW_HEIGHT = window.innerHeight;\nlet NUMBER_OF_POINTS = 100;\n\nfunction reportWindowSize() {\n    WINDOW_WIDTH = window.innerWidth;\n    WINDOW_HEIGHT = window.innerHeight;\n}\nwindow.onresize = reportWindowSize;\n\nconst PRIMARY_COLOR = 'turquoise';\nconst SECONDARY_COLOR = 'red';\nconst ANIMATION_SPEED_MS = 10;\n\nclass ClusteringVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            points: []\n        }\n    }\n    componentDidMount() {\n        this.resetPoints();\n    }\n    resetPoints() {\n        const points = [];\n        for (let i = 0; i < NUMBER_OF_POINTS; i++) {\n            points.push([\n                randomIntFromInterval(0, WINDOW_WIDTH),\n                randomIntFromInterval(0, WINDOW_HEIGHT)\n            ])\n        }\n        this.setState({points: points});\n    }\n    render() {\n        const points = this.state.points;\n        const TOTAL_BUTTONS = 5;\n        \n        return (\n            <>\n            <div className=\"points-container\">\n                {points.map((value, idx) => (\n                    <div\n                        className=\"a-point\"\n                        key={idx}\n                        style={{\n                            backgroundColor: PRIMARY_COLOR,\n                            left: `${value[0]}px`,\n                            bottom: `${value[1]}px`\n                        }}\n                    ></div>\n                ))}\n            </div>\n            <div className=\"buttons\" > \n                <button title=\"Generates a new random points\" \n                    style={{ position: 'relative',top:`${0*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} \n                    onClick={() => this.resetPoints()}>\n                    Generate New Points\n                </button>\n            </div>\n            </>\n        );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default ClusteringVisualizer;","import React from 'react';\nimport ClusteringVisualizer from './ClusteringVisualizer/ClusteringVisualizer'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ClusteringVisualizer />\n    </div>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n)"],"sourceRoot":""}